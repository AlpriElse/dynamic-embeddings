// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	UploadRequest
	UploadReply
	DownloadRequest
	DownloadReply
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadRequest struct {
	FileContents     []byte `protobuf:"bytes,1,opt,name=fileContents,proto3" json:"fileContents,omitempty"`
	SdfsFileName     string `protobuf:"bytes,2,opt,name=sdfsFileName" json:"sdfsFileName,omitempty"`
	IsMultipleChunks bool   `protobuf:"varint,3,opt,name=isMultipleChunks" json:"isMultipleChunks,omitempty"`
	IsFirstChunk     bool   `protobuf:"varint,4,opt,name=isFirstChunk" json:"isFirstChunk,omitempty"`
}

func (m *UploadRequest) Reset()                    { *m = UploadRequest{} }
func (m *UploadRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()               {}
func (*UploadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UploadRequest) GetFileContents() []byte {
	if m != nil {
		return m.FileContents
	}
	return nil
}

func (m *UploadRequest) GetSdfsFileName() string {
	if m != nil {
		return m.SdfsFileName
	}
	return ""
}

func (m *UploadRequest) GetIsMultipleChunks() bool {
	if m != nil {
		return m.IsMultipleChunks
	}
	return false
}

func (m *UploadRequest) GetIsFirstChunk() bool {
	if m != nil {
		return m.IsFirstChunk
	}
	return false
}

type UploadReply struct {
	Status bool `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *UploadReply) Reset()                    { *m = UploadReply{} }
func (m *UploadReply) String() string            { return proto.CompactTextString(m) }
func (*UploadReply) ProtoMessage()               {}
func (*UploadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UploadReply) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type DownloadRequest struct {
	SdfsFileName string `protobuf:"bytes,1,opt,name=sdfsFileName" json:"sdfsFileName,omitempty"`
	ChunkNum     int32  `protobuf:"varint,2,opt,name=chunkNum" json:"chunkNum,omitempty"`
}

func (m *DownloadRequest) Reset()                    { *m = DownloadRequest{} }
func (m *DownloadRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadRequest) ProtoMessage()               {}
func (*DownloadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DownloadRequest) GetSdfsFileName() string {
	if m != nil {
		return m.SdfsFileName
	}
	return ""
}

func (m *DownloadRequest) GetChunkNum() int32 {
	if m != nil {
		return m.ChunkNum
	}
	return 0
}

type DownloadReply struct {
	DoesFileExist    bool   `protobuf:"varint,1,opt,name=doesFileExist" json:"doesFileExist,omitempty"`
	FileContents     []byte `protobuf:"bytes,2,opt,name=fileContents,proto3" json:"fileContents,omitempty"`
	IsMultipleChunks bool   `protobuf:"varint,3,opt,name=isMultipleChunks" json:"isMultipleChunks,omitempty"`
	IsLastChunk      bool   `protobuf:"varint,4,opt,name=isLastChunk" json:"isLastChunk,omitempty"`
}

func (m *DownloadReply) Reset()                    { *m = DownloadReply{} }
func (m *DownloadReply) String() string            { return proto.CompactTextString(m) }
func (*DownloadReply) ProtoMessage()               {}
func (*DownloadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DownloadReply) GetDoesFileExist() bool {
	if m != nil {
		return m.DoesFileExist
	}
	return false
}

func (m *DownloadReply) GetFileContents() []byte {
	if m != nil {
		return m.FileContents
	}
	return nil
}

func (m *DownloadReply) GetIsMultipleChunks() bool {
	if m != nil {
		return m.IsMultipleChunks
	}
	return false
}

func (m *DownloadReply) GetIsLastChunk() bool {
	if m != nil {
		return m.IsLastChunk
	}
	return false
}

func init() {
	proto.RegisterType((*UploadRequest)(nil), "service.UploadRequest")
	proto.RegisterType((*UploadReply)(nil), "service.UploadReply")
	proto.RegisterType((*DownloadRequest)(nil), "service.DownloadRequest")
	proto.RegisterType((*DownloadReply)(nil), "service.DownloadReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FileTransfer service

type FileTransferClient interface {
	// Upload a file to another location
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadReply, error)
	// Download a file from another location
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadReply, error)
}

type fileTransferClient struct {
	cc *grpc.ClientConn
}

func NewFileTransferClient(cc *grpc.ClientConn) FileTransferClient {
	return &fileTransferClient{cc}
}

func (c *fileTransferClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadReply, error) {
	out := new(UploadReply)
	err := grpc.Invoke(ctx, "/service.FileTransfer/Upload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadReply, error) {
	out := new(DownloadReply)
	err := grpc.Invoke(ctx, "/service.FileTransfer/Download", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileTransfer service

type FileTransferServer interface {
	// Upload a file to another location
	Upload(context.Context, *UploadRequest) (*UploadReply, error)
	// Download a file from another location
	Download(context.Context, *DownloadRequest) (*DownloadReply, error)
}

func RegisterFileTransferServer(s *grpc.Server, srv FileTransferServer) {
	s.RegisterService(&_FileTransfer_serviceDesc, srv)
}

func _FileTransfer_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FileTransfer/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransfer_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FileTransfer/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileTransfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.FileTransfer",
	HandlerType: (*FileTransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _FileTransfer_Upload_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _FileTransfer_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x71, 0x81, 0x12, 0xae, 0x8d, 0x40, 0x16, 0x8a, 0xa2, 0x4c, 0x51, 0x04, 0x52, 0xc4,
	0xd0, 0x01, 0x16, 0x26, 0x96, 0x42, 0x27, 0xa8, 0x84, 0x05, 0x0f, 0x10, 0x1a, 0x47, 0x58, 0xb8,
	0x71, 0xc8, 0x39, 0x40, 0xdf, 0x80, 0x37, 0xe1, 0x35, 0x51, 0xdc, 0xa4, 0xe0, 0x26, 0x0b, 0xe3,
	0xfd, 0x7c, 0x7f, 0xbe, 0xfb, 0x7c, 0xe0, 0x22, 0x2f, 0xdf, 0xc5, 0x82, 0x4f, 0x8a, 0x52, 0x69,
	0x45, 0x0f, 0x9a, 0x30, 0xfa, 0x26, 0xe0, 0x3e, 0x15, 0x52, 0x25, 0x29, 0xe3, 0x6f, 0x15, 0x47,
	0x4d, 0x23, 0x18, 0x67, 0x42, 0xf2, 0xa9, 0xca, 0x35, 0xcf, 0x35, 0xfa, 0x24, 0x24, 0xf1, 0x98,
	0x59, 0xac, 0xce, 0xc1, 0x34, 0xc3, 0x99, 0x90, 0x7c, 0x9e, 0x2c, 0xb9, 0x3f, 0x08, 0x49, 0x7c,
	0xc8, 0x2c, 0x46, 0xcf, 0xe1, 0x58, 0xe0, 0x7d, 0x25, 0xb5, 0x28, 0x24, 0x9f, 0xbe, 0x54, 0xf9,
	0x2b, 0xfa, 0xbb, 0x21, 0x89, 0x1d, 0xd6, 0xe1, 0x75, 0x3f, 0x81, 0x33, 0x51, 0xa2, 0x36, 0xc0,
	0xdf, 0x33, 0x79, 0x16, 0x8b, 0xce, 0x60, 0xd4, 0x0a, 0x2d, 0xe4, 0x8a, 0x7a, 0x30, 0x44, 0x9d,
	0xe8, 0x6a, 0x2d, 0xd0, 0x61, 0x4d, 0x14, 0x3d, 0xc0, 0xd1, 0x8d, 0xfa, 0xc8, 0xb7, 0x36, 0xb2,
	0xd4, 0x92, 0x1e, 0xb5, 0x01, 0x38, 0x8b, 0x7a, 0xcc, 0xbc, 0x5a, 0x9a, 0x6d, 0xf6, 0xd9, 0x26,
	0x36, 0x1e, 0xfd, 0xf6, 0xac, 0x87, 0x9f, 0x82, 0x9b, 0x2a, 0x6e, 0xaa, 0x6f, 0x3f, 0x05, 0xea,
	0x46, 0x83, 0x0d, 0x3b, 0x4e, 0x0e, 0x7a, 0x9c, 0xfc, 0x8f, 0x4b, 0x21, 0x8c, 0x04, 0xde, 0x25,
	0xb6, 0x49, 0x7f, 0xd1, 0xc5, 0x17, 0x81, 0x71, 0x3d, 0xff, 0xb1, 0x4c, 0x72, 0xcc, 0x78, 0x49,
	0xaf, 0x60, 0xb8, 0x36, 0x8d, 0x7a, 0x93, 0xf6, 0x02, 0xac, 0xef, 0x0e, 0x4e, 0x3a, 0xbc, 0x90,
	0xab, 0x68, 0x87, 0x5e, 0x83, 0xd3, 0xee, 0x4c, 0xfd, 0x4d, 0xce, 0x96, 0xb5, 0x81, 0xd7, 0xf3,
	0x62, 0xea, 0x9f, 0x87, 0xe6, 0xd0, 0x2e, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x08, 0xc6, 0x32,
	0xc4, 0x79, 0x02, 0x00, 0x00,
}
